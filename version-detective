#!/usr/bin/env python
# Use static files and git to work out a web application's middleware version

import argparse, os, sys, git, re, subprocess, requests, difflib
from git import Repo

class Progress(git.remote.RemoteProgress):
  def line_dropped(self, line):
    print line
  def update(self, *args):
    print self._cur_line

class VersionDetective:
 
  def __init__( self, url, settings ):
    if 'webroot' not in settings.keys(): settings['webroot'] = ''
    self.settings = settings
    self.url = url

  # Clone a repo / branch
  def clone( self ):
    
    print 'Using git URL: ' + self.settings['git']
    repo_name = self.settings['git'].split('/')[-1].replace('.git','')
    if 'branch' in self.settings.keys():
      repo_name += self.settings['branch']

    # Make repos dir under the dir of this script
    repo_dir = os.path.dirname(os.path.realpath(__file__)) + '/repos/' + repo_name
    if os.path.isdir( repo_dir ):
      print repo_dir + ' already exists'
      repo = Repo(repo_dir) 
      o = repo.remotes.origin
      o.pull(progress=Progress())
    else:
      print 'Making dir ' + repo_dir
      os.makedirs( repo_dir )
      print 'Cloning ' + self.settings['git'] + ' into '+repo_dir+'...'
      repo = Repo.clone_from(self.settings['git'], repo_dir, progress=Progress())

    return repo


  def get_most_recent_matching_commit( self, fname ):
    
    print 'Finding a matching commit for ' + fname
    
    furl = self.url + '/' + self.settings['webroot'] + '/' + fname

    # Get remote file content
    r = requests.get(furl)
    remotecontent = r.text.splitlines()

    # Get list of commits relating to this file
    # git log --pretty=format:"%H" index.php
    p = subprocess.Popen(['git','log','--pretty=format:"%H"',fname], stdout=subprocess.PIPE, cwd=self.repo.working_dir, universal_newlines=False)
    out, err = p.communicate()
    commits = out.splitlines()

    for c in commits:
      # git show 5322be300a27460ae28fb79772d55f946179c84c:index.php
      c = c.replace('"','')
      print c + ':' + fname
      p = subprocess.Popen(['git','show',c+':'+fname], stdout=subprocess.PIPE, cwd=self.repo.working_dir, universal_newlines=False)
      out, err = p.communicate()
      content = out.splitlines()
  
      try:
        diff = difflib.unified_diff(remotecontent,content)
        lines = []
        for d in diff:
          lines.append(str(d))
        if len( lines ) == 0:
          return c
      except:
        continue
    return False


  def analyse( self ):
    
    # Clone repo
    self.repo = self.clone()

    # Produce list of static files from git log

    print 'Building static files index...'
    filesregex = r'\.(txt|md|js|css|html|xml)$'

    pipes = []
    pipes.append(['git','log','--name-status','--diff-filter=AM'])
    pipes.append(['grep','^\(commit\|A\)\W'])
    procs = []
    for p in pipes:
      
      # Any stdout available?
      if len( procs ) > 0:
        out = procs[-1].stdout
      else:
        out = None

      procs.append( subprocess.Popen(p, stdout=subprocess.PIPE, cwd=self.repo.working_dir, stdin=out, universal_newlines=False) )

    out,err = procs[-1].communicate()

    staticfiles = []

    commit = None
    for line in out.splitlines():
      m = re.match('commit\W+(\w+)',line)
      if m:
        commit = m.group(1)
        continue
      m = re.match('A\W+(.+)', line)
      if m:
        fname = m.group(1)
        if 'webroot' in self.settings.keys() and not re.match( self.settings['webroot'], fname ): continue
        if re.search( filesregex, fname ):
          if fname not in staticfiles:
            staticfiles.append(fname)
   
    validcommits = {}
    print str(len(staticfiles)) + ' static files found'
    for f in staticfiles:
      if len( validcommits ) >= 10: break
      furl = self.url + '/' + f
      print furl,
      r = requests.head(furl)
      print r.status_code
      if r.status_code == 200:
       
        # Get 
        commit = self.get_most_recent_matching_commit( f )
        if commit:
          print 'Matching commit: ' + commit
          if commit not in validcommits.keys(): validcommits[commit] = 0
          validcommits[commit] += 1
      
    # Get dates for each of these commits
    dates = {}
    for c in validcommits.keys():
      p = subprocess.Popen(['git','show','-s','--format=%ci',c], stdout=subprocess.PIPE, cwd=self.repo.working_dir, universal_newlines=False)
      out, err = p.communicate()
      date = out.strip()
      dates[date] = c
    
    dks = dates.keys()
    dks.sort( reverse=True )
    for d in dks:
      c = dates[d]
      print d + ': ' + c + ' ('+str(validcommits[c])+' matching files)'
    return

    # Check for presence of static files, narrowing version down to specific commits
    print str( len( staticfiles ) ) + ' static files found'

    # Check for exact matches of files present to further narrow down commits


def main():
  
  # Command line options
  parser = argparse.ArgumentParser(description="Determine a site's middleware version through analysis of it's static files")
  
  # Tool configuration
  parser.add_argument("-m", "--middleware", help="Middleware project to check out")
  parser.add_argument("-g", "--git", help="Check out this git URL to analyse (if not using --middleware)")
  parser.add_argument("-b", "--branch", help="Which branch of the git repo to use (if not using --middleware)")
  parser.add_argument("-w", "--webroot", help="Directory within the project which corresponds to the web root for static files (if not using --middleware)")
  parser.add_argument("-u", "--url", help="URL of site to compare against")
  args = parser.parse_args()
  
  if len( sys.argv)==1:
    parser.print_help()
    return

  # Projects and where their web root is
  middleware = {
    'drupal9': {
      'webroot': 'core',
      'git': 'https://git.drupal.org/project/drupal.git',
      'branch': '9.x'
    },
    'drupal8': {
      'webroot': 'core',
      'git': 'https://git.drupal.org/project/drupal.git',
      'branch': '8.6.x'
    },
    'drupal7': {
      'webroot': 'core',
      'git': 'https://git.drupal.org/project/drupal.git',
      'branch': '7.x'
    },
    'wordpress': {
      'git': 'https://github.com/WordPress/WordPress.git'
    }
  }

  if not args.url:
    print 'Requires a target URL --url'
    return
  
  if args.middleware and args.middleware in middleware.keys():
    settings = middleware[args.middleware]
  elif not args.git:
    print 'Requires at least --git or --middleware'
    return
  else:
    settings = {}

  if args.git:
    settings['git'] = args.git
  
  if args.branch:
    settings['branch'] = args.branch
  
  if args.webroot:
    settings['webroot'] = args.webroot

  detective = VersionDetective( args.url, settings )
  detective.analyse()

if __name__ == "__main__":
  main()

